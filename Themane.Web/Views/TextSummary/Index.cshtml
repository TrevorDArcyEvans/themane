@model TextSummary
@{
  ViewData["Title"] = "Text Summarisation";
}

<h2>Text Summary</h2>

<div class="row">
  @using (Html.BeginForm("SummaryResults", "TextSummary", FormMethod.Post))
  {
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
      <div class="form-group">
        @Html.LabelFor(model => model.InputText, "Input Text", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @Html.TextAreaFor(model => model.InputText, htmlAttributes: new { @class = "form-control", @rows = "50", @style = "width: 100%; max-width: 100%;" })
          @Html.ValidationMessageFor(model => model.InputText, "", new { @class = "text-danger" })
        </div>
      </div>

      <div class="form-group">
        @Html.LabelFor(model => model.TextRank_MaxWords, "Max Words", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @Html.TextBoxFor(model => model.TextRank_MaxWords, htmlAttributes: new { type = "range", @class = "col-md-2", @style = "width: 400px;padding-left: 0px;padding-right: 0px;", min = "10", max = "10000" })
          @Html.LabelFor(model => model.TextRank_MaxWords, "", new { @id = "TextRank_MaxWords_indicator", @class = "col-md-4" })
          @Html.ValidationMessageFor(model => model.TextRank_MaxWords, "", new { @class = "text-danger" })
        </div>
      </div>

      <div class="form-group">
        @Html.LabelFor(model => model.OpenText_MaxSentences, "Max Sentences", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @Html.TextBoxFor(model => model.OpenText_MaxSentences, htmlAttributes: new { type = "range", @class = "col-md-2", @style = "width: 400px;padding-left: 0px;padding-right: 0px;", min = "1", max = "1000" })
          @Html.LabelFor(model => model.OpenText_MaxSentences, "", new { @id = "OpenText_MaxSentences_indicator", @class = "col-md-4" })
          @Html.ValidationMessageFor(model => model.OpenText_MaxSentences, "", new { @class = "text-danger" })
        </div>
      </div>

      <div class="form-group">
        @Html.LabelFor(model => model.CodePlexOpenText_DisplayPercent, "Display Percent", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
          @Html.TextBoxFor(model => model.CodePlexOpenText_DisplayPercent, htmlAttributes: new { type = "range", @class = "col-md-2", @style = "width: 400px;padding-left: 0px;padding-right: 0px;", min = "1", max = "100" })
          @Html.LabelFor(model => model.CodePlexOpenText_DisplayPercent, "", new { @id = "CodePlexOpenText_DisplayPercent_indicator", @class = "col-md-4" })
          @Html.ValidationMessageFor(model => model.CodePlexOpenText_DisplayPercent, "", new { @class = "text-danger" })
        </div>
      </div>

      <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
          <input type="submit" value="Summarise" class="btn btn-default" />
        </div>
      </div>
    </div>
  }

  <script>
    function Connect(sliderId, indicatorId)
    {
      var slider = document.getElementById(sliderId);
      var indicator = document.getElementById(indicatorId);

      indicator.innerHTML = slider.value;
      slider.oninput = function ()
      {
        indicator.innerHTML = this.value;
      }
    }

    Connect("TextRank_MaxWords", "TextRank_MaxWords_indicator");
    Connect("OpenText_MaxSentences", "OpenText_MaxSentences_indicator");
    Connect("CodePlexOpenText_DisplayPercent", "CodePlexOpenText_DisplayPercent_indicator");
  </script>
</div>
